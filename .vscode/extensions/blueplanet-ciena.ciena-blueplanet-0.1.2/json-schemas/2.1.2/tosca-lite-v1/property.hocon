id          = "http://cyaninc.com/json-schemas/tosca-lite-v1/property#"
"$schema"   = "http://cyaninc.com/json-schemas/jsonschema.metaschema.draft-04-strict.json#"
description = "Schema for TOSCA Lite Property"

allOf       = [ {

    oneOf = [
      { required = [ type ] },
      { required = [ propertyType ] }
    ]

  }, {

    type        = object

    properties {

      title {
        description = """
        Brief human friendly title for the property.
        Think about the label next to a field in a UI form.
      """
        type        = string
        maxLength   = 64
      }

      description {
        description = """
        This is a more verbose description of the property.
        Think about the content of a help box or tooltip that shows up next to the property
        in a UI form.
      """
        type        = string
      }

      type {
        anyOf = [
          {
            "$ref" = "http://cyaninc.com/json-schemas/jsonschema.metaschema.draft-04-strict.json#/definitions/simpleTypes"
          }
        ]
      }

      propertyType {
        "$ref" = "http://cyaninc.com/json-schemas/jsonschema.metaschema.draft-04-strict-extended.json#/definitions/propertyType"
      }

      default {
        description = "Optional default value for the property"
        anyOf = [
          { type = string }
          { type = integer }
          { type = number }
          { type = boolean }
          { type = object }
          { type = array }
        ]
      }

      enum {
        description = "Optional enumeration of permissible values for this property"
        type       = array
        minItems   = 1
        uniqueItems = true
      }

      items {
        anyOf = [
          {
            "$ref" = "http://cyaninc.com/json-schemas/jsonschema.metaschema.draft-04-strict-extended.json#/definitions/schemaArray"
          },
          {
            "$ref" = "http://cyaninc.com/json-schemas/jsonschema.metaschema.draft-04-strict-extended.json#"
          }
        ]
      }

      output {
        description = "Indicates that property is an output of the creation phase and not an input"
        type        = boolean
        default     = false
      }

      config {
        description = "Indicates that property is a configurable property of the resource (ignored if output=true)"
        type        = boolean
        default     = true
      }

      updatable {
        description = "Indicates that the property can be changed after the resource is created (ignored if config=false)"
        type        = boolean
        default     = false
      }

      obfuscate {
        description = """
        Indicates that the value of the property cannot be read back (e.g., for security/privacy reasons).
        Ignored if config=false.
      """
        type        = boolean
        default     = false
      }

      store {
        description = "For non-config (read-only) attributes it indicates if the value is stored in the DB or not."
        type        = boolean
        default     = true
      }

      optional {
        description = "Indicates if the property is optional on create (ignored if config=false)"
        type        = boolean
        default     = false
      }

      history {
        description = """
        Indicates whether the value history for this property should be preserved. If this attribute is set to false,
        some history may still be preserved and may be visible when querying for historical values.
        """
        type = boolean
        default = true
      }

      fulltext {
        description = """
        Indicates if the property value is fullText searchable. FullText can be enabled only on string attributes.
        """
        type = boolean
        default = false
      }

      minimum {
        description = "Optional minimum value for the numeric type"
        type        = number // FIXME type must match type of property
      }

      maximum {
        description = "Optional maximum value for the numeric type"
        type        = number // FIXME type must match type of property
      }

      exclusiveMaximum {
        description = "If set, the value of the maximum field is excluded from the admitted range"
        type        = boolean
        default     = false
      }

      exclusiveMinimum {
        description = "If set, the value of the miniumum field is excluded from the admitted range"
        type        = boolean
        default     = false
      }

      units {
        description = """
        An optional string designator for a numeric type defining its units (e.g., kg, mm, MB)
      """
        type        = string
      }

      uiWidget {
        type        = string
      }

      properties {
        type = object
        additionalProperties {
          "$ref" = "http://cyaninc.com/json-schemas/jsonschema.metaschema.draft-04-strict-extended.json#"
        }
        default = {}
      }

      additionalProperties.type = boolean

      required {
        "$ref" = "http://cyaninc.com/json-schemas/jsonschema.metaschema.draft-04-strict.json#/definitions/stringArray"
      }


      format {
          description = "Additonal Format information"
          type = string
          enum = [ "time", "date", "uint64", "int64", "uint32", "int32", "uint16", "int16", "uint8", "int8", "hex-string", "vlan-id", "port-number", "bgp-as", "ipv4-address", "ipv4-prefix", "ipv4-interface", "netmask", "ipv6-address", "ipv6-prefix", "ipv6-interface", "ipv6-multicast" ] 
      }

    }

    dependencies {
      exclusiveMaximum = [ maximum ]
      exclusiveMinimum = [ minimum ]
      fulltext = { properties { type  { enum  = [ "string" ] } } }
    }

    additionalProperties = false

  }
]
